<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Jogo de Futebol 1x1 - Aprimorado</title>
<style>
  * { box-sizing: border-box; }
  body {
    margin:0; font-family: 'Arial', sans-serif; background: linear-gradient(135deg, #004d00, #002200); color:#fff; 
    display:flex; flex-direction:column; align-items:center; justify-content:center; min-height:100vh;
    animation: backgroundPulse 4s ease-in-out infinite alternate;
  }
  @keyframes backgroundPulse {
    0% { background: linear-gradient(135deg, #004d00, #002200); }
    100% { background: linear-gradient(135deg, #006600, #003300); }
  }
  .hidden { display:none; }
  h1, h2 { margin:0 0 10px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.5); }
  .character-select {
    max-width:900px; width:100%; padding:30px; background: rgba(1,51,0,0.95); border-radius:15px; 
    box-shadow:0 0 30px rgba(0,255,0,0.3); backdrop-filter: blur(10px); border: 2px solid rgba(0,255,0,0.2);
  }
  .character-selection {
    display:flex; justify-content:space-between; margin-bottom:20px; gap: 20px;
  }
  .player-section {
    flex:1; background: rgba(0,100,0,0.3); padding: 20px; border-radius: 10px; 
    border: 1px solid rgba(0,255,0,0.2);
  }
  .characters-grid {
    display:grid; grid-template-columns: repeat(3, 1fr); gap:15px;
  }
  .character-option {
    background: linear-gradient(135deg, #055505, #033303); border-radius:12px; cursor:pointer; 
    font-size:35px; text-align:center; padding:20px 0; user-select:none; 
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 2px solid transparent; position: relative; overflow: hidden;
  }
  .character-option::before {
    content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  .character-option:hover::before {
    left: 100%;
  }
  .character-option:hover {
    transform: scale(1.1) rotate(2deg);
    box-shadow: 0 10px 25px rgba(0,255,0,0.4);
    border-color: rgba(0,255,0,0.5);
  }
  .character-option.selected {
    box-shadow: 0 0 25px #00ff00;
    border: 3px solid #00ff00;
    transform: scale(1.05);
    animation: selectedGlow 2s ease-in-out infinite alternate;
  }
  @keyframes selectedGlow {
    0% { box-shadow: 0 0 25px #00ff00; }
    100% { box-shadow: 0 0 35px #00ff00, 0 0 50px rgba(0,255,0,0.3); }
  }
  .character-name {
    margin-top:15px; font-weight:bold; text-align:center; min-height:24px; font-size: 16px;
  }
  .start-game-btn {
    background: linear-gradient(135deg, #00cc00, #008800); border:none; padding:15px 30px; 
    font-size:20px; font-weight:bold; border-radius:10px; cursor:pointer; 
    transition: all 0.3s ease; width:100%; text-transform: uppercase;
    box-shadow: 0 5px 15px rgba(0,204,0,0.3);
  }
  .start-game-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #00ff00, #00aa00);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,255,0,0.4);
  }
  .start-game-btn:disabled {
    background: linear-gradient(135deg, #004400, #002200); cursor:not-allowed; opacity: 0.5;
  }
  .game-container {
    max-width:900px; width:100%; background: rgba(1,51,0,0.95); padding:20px; border-radius:15px; 
    box-shadow:0 0 30px rgba(0,255,0,0.3); text-align:center; backdrop-filter: blur(10px);
    border: 2px solid rgba(0,255,0,0.2);
  }
  .score {
    display:flex; justify-content:space-between; font-size:24px; margin-bottom:15px;
    background: rgba(0,100,0,0.3); padding: 15px; border-radius: 10px;
  }
  .player-score {
    display:flex; align-items:center; gap:12px; font-weight: bold;
  }
  .player-indicator {
    width:40px; height:40px; border-radius:50%; font-size:24px; text-align:center; line-height:40px; 
    color:#000; box-shadow: 0 0 10px rgba(0,0,0,0.5); border: 2px solid rgba(255,255,255,0.3);
  }
  .timer {
    font-size:22px; margin-bottom:15px; background: rgba(255,0,0,0.2); padding: 10px; 
    border-radius: 8px; font-weight: bold;
  }
  canvas {
    background: linear-gradient(45deg, #006400, #004d00); border:4px solid #fff; border-radius:15px;
    display:block; margin:0 auto 20px auto; box-shadow: 0 0 20px rgba(0,0,0,0.5);
  }
  .controls {
    background: rgba(0,100,0,0.3); padding: 15px; border-radius: 10px; margin-top: 10px;
  }
  .controls p {
    font-size:16px; margin:0; font-weight: bold;
  }
  .game-over {
    max-width:500px; background: rgba(1,51,0,0.95); padding:30px; border-radius:15px; 
    box-shadow:0 0 40px rgba(0,255,0,0.4); text-align:center; backdrop-filter: blur(10px);
    border: 2px solid rgba(0,255,0,0.3);
  }
  .game-over .winner {
    font-size:32px; font-weight:bold; margin-bottom:20px; text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
    animation: winnerPulse 1s ease-in-out infinite alternate;
  }
  @keyframes winnerPulse {
    0% { transform: scale(1); }
    100% { transform: scale(1.05); }
  }
  .restart-btn {
    background: linear-gradient(135deg, #00cc00, #008800); border:none; padding:15px 30px; 
    font-size:20px; font-weight:bold; border-radius:10px; cursor:pointer; 
    transition: all 0.3s ease; text-transform: uppercase; box-shadow: 0 5px 15px rgba(0,204,0,0.3);
  }
  .restart-btn:hover {
    background: linear-gradient(135deg, #00ff00, #00aa00);
    transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0,255,0,0.4);
  }
  .stats {
    display: flex; justify-content: space-between; margin-top: 15px; font-size: 14px;
    background: rgba(0,100,0,0.2); padding: 10px; border-radius: 8px;
  }
</style>
</head>
<body>
  <div class="character-select" id="characterSelect">
    <h1>‚öΩ Escolha os Jogadores ‚öΩ</h1>
    <div class="character-selection">
      <div class="player-section">
        <h2>üéÆ Seu Jogador</h2>
        <div class="characters-grid" id="playerCharacters"></div>
        <div class="character-name" id="playerCharacterName">Selecione um personagem</div>
      </div>
      <div class="player-section">
        <h2>ü§ñ Advers√°rio</h2>
        <div class="characters-grid" id="aiCharacters"></div>
        <div class="character-name" id="aiCharacterName">Selecione um advers√°rio</div>
      </div>
    </div>
    <button class="start-game-btn" id="startGameBtn" disabled>üöÄ Come√ßar Partida</button>
  </div>

  <div class="game-container hidden" id="gameContainer">
    <div class="score">
      <div class="player-score">
        <div class="player-indicator" id="playerIndicator"></div>
        <span>Voc√™: <span id="playerScore">0</span></span>
      </div>
      <div class="player-score">
        <span>IA: <span id="aiScore">0</span></span>
        <div class="player-indicator" id="aiIndicator"></div>
      </div>
    </div>
    <div class="timer">‚è±Ô∏è Tempo: <span id="timer">90</span>s</div>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <div class="controls">
      <p>üéØ Use as setas ou WASD para mover ‚Ä¢ ESPA√áO para chutar</p>
    </div>
    <div class="stats">
      <span>Chutes: <span id="playerShots">0</span></span>
      <span>Posses: <span id="ballPossessions">0</span></span>
      <span>Velocidade da Bola: <span id="ballSpeed">0</span></span>
    </div>
  </div>

  <div class="game-over hidden" id="gameOver">
    <div class="winner" id="winner"></div>
    <p>Placar Final: <span id="finalPlayerScore">0</span> x <span id="finalAiScore">0</span></p>
    <div style="margin: 20px 0; font-size: 16px;">
      <p>üéØ Chutes totais: <span id="finalPlayerShots">0</span></p>
      <p>‚öΩ Posses de bola: <span id="finalBallPossessions">0</span></p>
    </div>
    <button class="restart-btn" id="restartBtn">üîÑ Jogar Novamente</button>
  </div>

<script>
  const characters = [
    { id: 'player1', name: 'Atacante', color: '#FF6B6B', emoji: '‚ö°', speed: 4.5, power: 1.2 },
    { id: 'player2', name: 'Defensor', color: '#4ECDC4', emoji: 'üõ°Ô∏è', speed: 3.5, power: 0.8 },
    { id: 'player3', name: 'Capit√£o', color: '#45B7D1', emoji: 'üëë', speed: 4, power: 1 },
    { id: 'player4', name: 'Velocista', color: '#96CEB4', emoji: 'üí®', speed: 5, power: 0.9 },
    { id: 'player5', name: 'Artilheiro', color: '#FFEAA7', emoji: 'üéØ', speed: 3.8, power: 1.4 },
    { id: 'player6', name: 'Goleiro', color: '#DDA0DD', emoji: 'ü•Ö', speed: 3, power: 0.7 },
    { id: 'player7', name: 'M√°gico', color: '#FF7675', emoji: '‚ú®', speed: 4.2, power: 1.1 },
    { id: 'player8', name: 'Rob√¥', color: '#A29BFE', emoji: 'ü§ñ', speed: 4.8, power: 1.3 },
    { id: 'player9', name: 'Ninja', color: '#6C5CE7', emoji: 'ü•∑', speed: 4.7, power: 1.1 }
  ];

  let selectedPlayer = null;
  let selectedAI = null;
  let gameState = null;
  let gameStats = { playerShots: 0, ballPossessions: 0, lastPossessor: null };

  const characterSelectScreen = document.getElementById('characterSelect');
  const gameScreen = document.getElementById('gameContainer');
  const startGameBtn = document.getElementById('startGameBtn');
  const playerCharacterName = document.getElementById('playerCharacterName');
  const aiCharacterName = document.getElementById('aiCharacterName');
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const gameOverScreen = document.getElementById('gameOver');
  const winnerText = document.getElementById('winner');
  const finalPlayerScore = document.getElementById('finalPlayerScore');
  const finalAiScore = document.getElementById('finalAiScore');
  const restartBtn = document.getElementById('restartBtn');

  function initCharacterSelect() {
    const playerGrid = document.getElementById('playerCharacters');
    const aiGrid = document.getElementById('aiCharacters');
    characters.forEach(char => {
      const playerChar = createCharacterElement(char, 'player');
      playerGrid.appendChild(playerChar);
      const adversarioChar = createCharacterElement(char, 'ai');
      aiGrid.appendChild(adversarioChar);
    });
  }

  function createCharacterElement(character, type) {
    const div = document.createElement('div');
    div.className = 'character-option';
    div.style.background = `linear-gradient(135deg, ${character.color}, ${adjustBrightness(character.color, -20)})`;
    div.innerHTML = `${character.emoji}<br><small style="font-size:12px;">${character.name}</small>`;
    div.title = `${character.name} - Vel: ${character.speed} | For√ßa: ${character.power}`;
    div.addEventListener('click', () => selectCharacter(character, type, div));
    return div;
  }

  function adjustBrightness(hex, percent) {
    const num = parseInt(hex.replace("#", ""), 16);
    const amt = Math.round(2.55 * percent);
    const R = (num >> 16) + amt;
    const G = (num >> 8 & 0x00FF) + amt;
    const B = (num & 0x0000FF) + amt;
    return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
      (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
      (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
  }

  function selectCharacter(character, type, element) {
    if(type === 'player'){
      document.querySelectorAll('#playerCharacters .character-option').forEach(el => el.classList.remove('selected'));
      selectedPlayer = character;
      element.classList.add('selected');
      playerCharacterName.textContent = `${character.name} (Vel: ${character.speed}, For√ßa: ${character.power})`;
    } else {
      document.querySelectorAll('#aiCharacters .character-option').forEach(el => el.classList.remove('selected'));
      selectedAI = character;
      element.classList.add('selected');
      aiCharacterName.textContent = `${character.name} (Vel: ${character.speed}, For√ßa: ${character.power})`;
    }
    startGameBtn.disabled = !(selectedPlayer && selectedAI);
  }

  startGameBtn.addEventListener('click', () => {
    characterSelectScreen.classList.add('hidden');
    gameScreen.classList.remove('hidden');
    document.getElementById('playerIndicator').style.background = `linear-gradient(135deg, ${selectedPlayer.color}, ${adjustBrightness(selectedPlayer.color, -20)})`;
    document.getElementById('playerIndicator').textContent = selectedPlayer.emoji;
    document.getElementById('aiIndicator').style.background = `linear-gradient(135deg, ${selectedAI.color}, ${adjustBrightness(selectedAI.color, -20)})`;
    document.getElementById('aiIndicator').textContent = selectedAI.emoji;
    initGame();
  });

  restartBtn.addEventListener('click', () => {
    gameOverScreen.classList.add('hidden');
    characterSelectScreen.classList.remove('hidden');
    selectedPlayer = null;
    selectedAI = null;
    startGameBtn.disabled = true;
    playerCharacterName.textContent = 'Selecione um personagem';
    aiCharacterName.textContent = 'Selecione um advers√°rio';
    document.querySelectorAll('#playerCharacters .character-option').forEach(el => el.classList.remove('selected'));
    document.querySelectorAll('#aiCharacters .character-option').forEach(el => el.classList.remove('selected'));
    gameStats = { playerShots: 0, ballPossessions: 0, lastPossessor: null };
  });

  function initGame(){
    gameState = {
      player: { x: 400, y: 500, size: 22, color: selectedPlayer.color, emoji: selectedPlayer.emoji, 
                speed: selectedPlayer.speed, power: selectedPlayer.power },
      ai: { x: 400, y: 100, size: 22, color: selectedAI.color, emoji: selectedAI.emoji, 
            speed: selectedAI.speed, power: selectedAI.power },
      ball: { x: 400, y: 300, size: 12, vx:0, vy:0, color:'#fff' },
      playerGoal: { x: 325, y: 560, width: 150, height: 40 },
      aiGoal: { x: 325, y: 0, width: 150, height: 40 },
      playerScore: 0,
      aiScore: 0,
      timeLeft: 90,
      gameRunning: true,
      keys: {},
      aiTarget: { x: 400, y: 300 },
      aiLastKick: 0,
      lastKicker: null,
      trails: [],
      particles: []
    };
    document.getElementById('playerScore').textContent = '0';
    document.getElementById('aiScore').textContent = '0';
    document.getElementById('timer').textContent = '90';
    updateStats();
    timer();
    gameLoop();
  }

  function updateStats() {
    document.getElementById('playerShots').textContent = gameStats.playerShots;
    document.getElementById('ballPossessions').textContent = gameStats.ballPossessions;
    const ballSpeed = Math.sqrt(gameState?.ball.vx ** 2 + gameState?.ball.vy ** 2).toFixed(1);
    document.getElementById('ballSpeed').textContent = ballSpeed;
  }

  window.addEventListener('keydown', e => {
    if(gameState) gameState.keys[e.code] = true;
  });

  window.addEventListener('keyup', e => {
    if(gameState) gameState.keys[e.code] = false;
  });

  function updatePlayer(){
    const speed = gameState.player.speed;
    if(gameState.keys['ArrowUp'] || gameState.keys['KeyW']) gameState.player.y -= speed;
    if(gameState.keys['ArrowDown'] || gameState.keys['KeyS']) gameState.player.y += speed;
    if(gameState.keys['ArrowLeft'] || gameState.keys['KeyA']) gameState.player.x -= speed;
    if(gameState.keys['ArrowRight'] || gameState.keys['KeyD']) gameState.player.x += speed;

    gameState.player.x = Math.min(canvas.width - gameState.player.size, Math.max(gameState.player.size, gameState.player.x));
    gameState.player.y = Math.min(canvas.height - gameState.player.size, Math.max(gameState.player.size, gameState.player.y));

    // Check ball possession
    const playerBallDist = Math.sqrt((gameState.ball.x - gameState.player.x) ** 2 + (gameState.ball.y - gameState.player.y) ** 2);
    if(playerBallDist < 35 && gameStats.lastPossessor !== 'player') {
      gameStats.ballPossessions++;
      gameStats.lastPossessor = 'player';
    }
  }

  function updateAI(){
    const aiSpeed = gameState.ai.speed;
    gameState.aiLastKick++;
    const ballDx = gameState.ball.x - gameState.ai.x;
    const ballDy = gameState.ball.y - gameState.ai.y;
    const ballDistance = Math.sqrt(ballDx*ballDx + ballDy*ballDy);

    // Improved AI strategy
    if(gameState.ball.y < canvas.height / 2 + 100){
      gameState.aiTarget.x = gameState.ball.x + (Math.random() - 0.5) * 50;
      gameState.aiTarget.y = gameState.ball.y + (Math.random() - 0.5) * 30;
    } else {
      gameState.aiTarget.x = canvas.width/2 + (Math.random() - 0.5) * 100;
      gameState.aiTarget.y = canvas.height/3;
    }

    const dx = gameState.aiTarget.x - gameState.ai.x;
    const dy = gameState.aiTarget.y - gameState.ai.y;
    const dist = Math.sqrt(dx*dx + dy*dy);
    if(dist > 1){
      gameState.ai.x += (dx / dist) * aiSpeed;
      gameState.ai.y += (dy / dist) * aiSpeed;
    }

    if(ballDistance < 35 && gameState.aiLastKick > 45){
      kickBall('ai');
      gameState.aiLastKick = 0;
    }

    gameState.ai.x = Math.min(canvas.width - gameState.ai.size, Math.max(gameState.ai.size, gameState.ai.x));
    gameState.ai.y = Math.min(canvas.height - gameState.ai.size, Math.max(gameState.ai.size, gameState.ai.y));

    // Check AI ball possession
    if(ballDistance < 35 && gameStats.lastPossessor !== 'ai') {
      gameStats.lastPossessor = 'ai';
    }
  }

  function kickBall(who){
    if(who === 'player'){
      if(gameState.keys['Space']){
        const dx = gameState.ball.x - gameState.player.x;
        const dy = gameState.ball.y - gameState.player.y;
        const dist = Math.sqrt(dx*dx + dy*dy);
        if(dist < 45){
          const kickPower = 6 * gameState.player.power;
          gameState.ball.vx = (dx / dist) * kickPower;
          gameState.ball.vy = (dy / dist) * kickPower;
          gameStats.playerShots++;
          addParticles(gameState.ball.x, gameState.ball.y, '#ffff00');
        }
      }
    } else if(who === 'ai'){
      const dx = gameState.playerGoal.x + gameState.playerGoal.width/2 - gameState.ball.x;
      const dy = gameState.playerGoal.y + gameState.playerGoal.height/2 - gameState.ball.y;
      const dist = Math.sqrt(dx*dx + dy*dy);
      const kickPower = 5 * gameState.ai.power;
      gameState.ball.vx = (dx / dist) * kickPower + (Math.random() - 0.5) * 2;
      gameState.ball.vy = (dy / dist) * kickPower + (Math.random() - 0.5) * 2;
      addParticles(gameState.ball.x, gameState.ball.y, '#ff6666');
    }
  }

  function addParticles(x, y, color) {
    for(let i = 0; i < 8; i++) {
      gameState.particles.push({
        x: x, y: y, vx: (Math.random() - 0.5) * 10, vy: (Math.random() - 0.5) * 10,
        color: color, life: 30, maxLife: 30
      });
    }
  }

  function updateBall(){
    // Add ball trail
    gameState.trails.push({ x: gameState.ball.x, y: gameState.ball.y, life: 10 });
    gameState.trails = gameState.trails.filter(trail => --trail.life > 0);

    gameState.ball.x += gameState.ball.vx;
    gameState.ball.y += gameState.ball.vy;

    gameState.ball.vx *= 0.96;
    gameState.ball.vy *= 0.96;

    // Enhanced ball physics with sound effect simulation
    if(gameState.ball.x < gameState.ball.size){
      gameState.ball.x = gameState.ball.size;
      gameState.ball.vx *= -0.8;
      addParticles(gameState.ball.x, gameState.ball.y, '#ffffff');
    }
    if(gameState.ball.x > canvas.width - gameState.ball.size){
      gameState.ball.x = canvas.width - gameState.ball.size;
      gameState.ball.vx *= -0.8;
      addParticles(gameState.ball.x, gameState.ball.y, '#ffffff');
    }
    if(gameState.ball.y < gameState.ball.size){
      gameState.ball.y = gameState.ball.size;
      gameState.ball.vy *= -0.8;
      addParticles(gameState.ball.x, gameState.ball.y, '#ffffff');
    }
    if(gameState.ball.y > canvas.height - gameState.ball.size){
      gameState.ball.y = canvas.height - gameState.ball.size;
      gameState.ball.vy *= -0.8;
      addParticles(gameState.ball.x, gameState.ball.y, '#ffffff');
    }

    // Update particles
    gameState.particles = gameState.particles.filter(particle => {
      particle.x += particle.vx;
      particle.y += particle.vy;
      particle.vx *= 0.95;
      particle.vy *= 0.95;
      particle.life--;
      return particle.life > 0;
    });
  }

  function checkGoals(){
    const ball = gameState.ball;
    const pGoal = gameState.playerGoal;
    const aiGoal = gameState.aiGoal;

    if(ball.x > pGoal.x && ball.x < pGoal.x + pGoal.width && ball.y > pGoal.y && ball.y < pGoal.y + pGoal.height){
      gameState.aiScore++;
      document.getElementById('aiScore').textContent = gameState.aiScore;
      addParticles(ball.x, ball.y, '#ff0000');
      resetPositions();
    } else if(ball.x > aiGoal.x && ball.x < aiGoal.x + aiGoal.width && ball.y > aiGoal.y && ball.y < aiGoal.y + aiGoal.height){
      gameState.playerScore++;
      document.getElementById('playerScore').textContent = gameState.playerScore;
      addParticles(ball.x, ball.y, '#00ff00');
      resetPositions();
    }
  }

  function resetPositions(){
    gameState.player.x = 400;
    gameState.player.y = 500;
    gameState.ai.x = 400;
    gameState.ai.y = 100;
    gameState.ball.x = 400;
    gameState.ball.y = 300;
    gameState.ball.vx = 0;
    gameState.ball.vy = 0;
    gameStats.lastPossessor = null;
  }

  function drawCharacter(c){
    // Draw character shadow
    ctx.fillStyle = 'rgba(0,0,0,0.3)';
    ctx.beginPath();
    ctx.ellipse(c.x + 2, c.y + 2, c.size, c.size * 0.5, 0, 0, Math.PI*2);
    ctx.fill();

    // Draw character with gradient
    const gradient = ctx.createRadialGradient(c.x, c.y, 0, c.x, c.y, c.size);
    gradient.addColorStop(0, c.color);
    gradient.addColorStop(1, adjustBrightness(c.color, -30));
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(c.x, c.y, c.size, 0, Math.PI*2);
    ctx.fill();

    // Draw character border
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 2;
    ctx.stroke();
  }

  function draw(){
    // Clear with gradient background
    const bgGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
    bgGradient.addColorStop(0, '#004d00');
    bgGradient.addColorStop(1, '#006400');
    ctx.fillStyle = bgGradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw field markings
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 3;
    
    // Center circle
    ctx.beginPath();
    ctx.arc(canvas.width/2, canvas.height/2, 80, 0, Math.PI*2);
    ctx.stroke();
    
    // Center line
    ctx.beginPath();
    ctx.moveTo(0, canvas.height/2);
    ctx.lineTo(canvas.width, canvas.height/2);
    ctx.stroke();
    
    // Goals with improved design
    const goalGradient = ctx.createLinearGradient(0, 0, 0, 50);
    goalGradient.addColorStop(0, '#ffffff');
    goalGradient.addColorStop(1, '#cccccc');
    
    ctx.fillStyle = goalGradient;
    ctx.fillRect(gameState.playerGoal.x, gameState.playerGoal.y, gameState.playerGoal.width, gameState.playerGoal.height);
    ctx.fillRect(gameState.aiGoal.x, gameState.aiGoal.y, gameState.aiGoal.width, gameState.aiGoal.height);
    
    // Goal posts
    ctx.strokeStyle = '#999';
    ctx.lineWidth = 4;
    ctx.strokeRect(gameState.playerGoal.x, gameState.playerGoal.y, gameState.playerGoal.width, gameState.playerGoal.height);
    ctx.strokeRect(gameState.aiGoal.x, gameState.aiGoal.y, gameState.aiGoal.width, gameState.aiGoal.height);

    // Draw ball trail
    ctx.lineWidth = 2;
    gameState.trails.forEach((trail, index) => {
      const alpha = trail.life / 10;
      ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.5})`;
      ctx.beginPath();
      ctx.arc(trail.x, trail.y, gameState.ball.size * alpha, 0, Math.PI*2);
      ctx.fill();
    });

    // Draw characters
    drawCharacter(gameState.player);
    drawCharacter(gameState.ai);

    // Draw ball with enhanced effects
    const ballGradient = ctx.createRadialGradient(gameState.ball.x - 3, gameState.ball.y - 3, 0, gameState.ball.x, gameState.ball.y, gameState.ball.size);
    ballGradient.addColorStop(0, '#ffffff');
    ballGradient.addColorStop(1, '#cccccc');
    
    // Ball shadow
    ctx.fillStyle = 'rgba(0,0,0,0.3)';
    ctx.beginPath();
    ctx.ellipse(gameState.ball.x + 2, gameState.ball.y + 2, gameState.ball.size, gameState.ball.size * 0.5, 0, 0, Math.PI*2);
    ctx.fill();
    
    // Ball
    ctx.fillStyle = ballGradient;
    ctx.beginPath();
    ctx.arc(gameState.ball.x, gameState.ball.y, gameState.ball.size, 0, Math.PI*2);
    ctx.fill();
    
    // Ball pattern
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(gameState.ball.x, gameState.ball.y, gameState.ball.size * 0.7, 0, Math.PI);
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(gameState.ball.x, gameState.ball.y, gameState.ball.size * 0.7, Math.PI, Math.PI*2);
    ctx.stroke();

    // Draw particles
    gameState.particles.forEach(particle => {
      const alpha = particle.life / particle.maxLife;
      ctx.fillStyle = particle.color.replace(')', `, ${alpha})`).replace('rgb', 'rgba');
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, 3 * alpha, 0, Math.PI*2);
      ctx.fill();
    });

    // Draw emojis on characters
    ctx.font = '28px Arial';
    ctx.fillStyle = '#fff';
    ctx.textAlign = 'center';
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 1;
    ctx.strokeText(gameState.player.emoji, gameState.player.x, gameState.player.y + 10);
    ctx.fillText(gameState.player.emoji, gameState.player.x, gameState.player.y + 10);
    ctx.strokeText(gameState.ai.emoji, gameState.ai.x, gameState.ai.y + 10);
    ctx.fillText(gameState.ai.emoji, gameState.ai.x, gameState.ai.y + 10);
  }

  function gameLoop(){
    if(!gameState.gameRunning) return;
    updatePlayer();
    updateAI();
    kickBall('player');
    updateBall();
    checkGoals();
    updateStats();
    draw();
    if(gameState.timeLeft > 0){
      requestAnimationFrame(gameLoop);
    }
  }

  function timer(){
    if(gameState.timeLeft > 0){
      gameState.timeLeft--;
      document.getElementById('timer').textContent = gameState.timeLeft;
      
      // Change timer color when time is running out
      const timerElement = document.getElementById('timer').parentElement;
      if(gameState.timeLeft <= 10) {
        timerElement.style.background = 'rgba(255,0,0,0.4)';
        timerElement.style.animation = 'none';
        timerElement.offsetHeight; // Trigger reflow
        timerElement.style.animation = 'winnerPulse 0.5s ease-in-out infinite alternate';
      } else if(gameState.timeLeft <= 30) {
        timerElement.style.background = 'rgba(255,165,0,0.3)';
      }
      
      setTimeout(timer, 1000);
    } else {
      endGame();
    }
  }

  function endGame(){
    gameState.gameRunning = false;
    gameScreen.classList.add('hidden');
    finalPlayerScore.textContent = gameState.playerScore;
    finalAiScore.textContent = gameState.aiScore;
    document.getElementById('finalPlayerShots').textContent = gameStats.playerShots;
    document.getElementById('finalBallPossessions').textContent = gameStats.ballPossessions;
    
    if(gameState.playerScore > gameState.aiScore){
      winnerText.textContent = 'üèÜ Voc√™ Venceu! üèÜ';
      winnerText.style.color = '#00ff00';
    } else if(gameState.playerScore < gameState.aiScore){
      winnerText.textContent = 'üòî Voc√™ Perdeu! üòî';
      winnerText.style.color = '#ff4444';
    } else {
      winnerText.textContent = 'ü§ù Empate! ü§ù';
      winnerText.style.color = '#ffff00';
    }
    gameOverScreen.classList.remove('hidden');
  }

  // Touch controls for mobile
  let touchStartX, touchStartY;
  
  canvas.addEventListener('touchstart', (e) => {
    e.preventDefault();
    const touch = e.touches[0];
    const rect = canvas.getBoundingClientRect();
    touchStartX = touch.clientX - rect.left;
    touchStartY = touch.clientY - rect.top;
  });
  
  canvas.addEventListener('touchend', (e) => {
    e.preventDefault();
    if(gameState && gameState.gameRunning) {
      // Simulate kick on touch
      const dx = gameState.ball.x - gameState.player.x;
      const dy = gameState.ball.y - gameState.player.y;
      const dist = Math.sqrt(dx*dx + dy*dy);
      if(dist < 45){
        const kickPower = 6 * gameState.player.power;
        gameState.ball.vx = (dx / dist) * kickPower;
        gameState.ball.vy = (dy / dist) * kickPower;
        gameStats.playerShots++;
        addParticles(gameState.ball.x, gameState.ball.y, '#ffff00');
      }
    }
  });
  
  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    if(gameState && gameState.gameRunning && touchStartX !== undefined) {
      const touch = e.touches[0];
      const rect = canvas.getBoundingClientRect();
      const currentX = touch.clientX - rect.left;
      const currentY = touch.clientY - rect.top;
      
      const deltaX = currentX - touchStartX;
      const deltaY = currentY - touchStartY;
      
      // Move player based on touch drag
      const sensitivity = 0.5;
      gameState.player.x += deltaX * sensitivity;
      gameState.player.y += deltaY * sensitivity;
      
      // Keep player within bounds
      gameState.player.x = Math.min(canvas.width - gameState.player.size, Math.max(gameState.player.size, gameState.player.x));
      gameState.player.y = Math.min(canvas.height - gameState.player.size, Math.max(gameState.player.size, gameState.player.y));
      
      touchStartX = currentX;
      touchStartY = currentY;
    }
  });

  window.onload = () => {
    initCharacterSelect();
  };
</script>
</body>
</html>
